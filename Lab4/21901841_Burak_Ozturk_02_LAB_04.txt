CS224
Lab 04
Section 02
Burak Öztürk
21901841

// Written by David_Harris@hmc.edu

// Top level system including MIPS and memories


module top  (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr,            
	     output  logic       memwrite, 
	     output logic[31:0] pc, instr);  

   logic [31:0] pc, instr, readdata;

   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:2], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule



// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule



// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output


module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
		/*8'h00: instr = 32'h20020005;  	// disassemble, by hand 
		8'h04: instr = 32'h2003000c;  	// or with a program,
		8'h08: instr = 32'h2067fff7;  	// to find out what
		8'h0c: instr = 32'h00e22025;  	// this program does!
		8'h10: instr = 32'h00642824;
		8'h14: instr = 32'h00a42820;
		8'h18: instr = 32'h10a7000a;
		8'h1c: instr = 32'h0064202a;
		8'h20: instr = 32'h10800001;
		8'h24: instr = 32'h20050000;
		8'h28: instr = 32'h00e2202a;
		8'h2c: instr = 32'h00853820;
		8'h30: instr = 32'h00e23822;
		8'h34: instr = 32'hac670044;
		8'h38: instr = 32'h8c020050;
		8'h3c: instr = 32'h08000011;
		8'h40: instr = 32'h20020001;
		8'h44: instr = 32'hac020054;
		8'h48: instr = 32'h08000012;	// j 48, so it will loop here*/
		8'h00: instr = 32'h20100010;    // s0 = 16
		8'h04: instr = 32'h26110006;    // s1 = s0 + 6
		8'h08: instr = 32'h00112020;    // a0 = s1
		8'h0c: instr = 32'h20100002;    // s0 = 2
		8'h10: instr = 32'h20110005;    // s1 = 5
		8'h14: instr = 32'h02119025;    // s2 = s0 | s1
		8'h18: instr = 32'h02119824;    // s3 = s0 & s1
		8'h1c: instr = 32'h0272082a;    // at = s3 < s2
		8'h20: instr = 32'h2410fff6;    // s0 = -(-10)
		8'h24: instr = 32'hb2120000;    // M(s0) = s2, s0 += 4
		8'h28: instr = 32'hb2130000;    // M(s0) = s3, s0 += 4
		8'h2c: instr = 32'hb2140000;    // M(s0) = s4, s0 += 4
		8'h30: instr = 32'h20110003;    // s1 = 3
		8'h34: instr = 32'h10110003;    // j to 44 if s1 == 0
		8'h38: instr = 32'h26100004;    // s0 -= 4
		8'h3c: instr = 32'h26310001;    // s1 -= 1
		8'h40: instr = 32'h8e040000;    // a0 = M(s0)
		8'h44: instr = 32'h0800000d;    // j to 34       */
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


// single-cycle MIPS processor, with controller and datapath

module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump, rsp;
  logic [2:0]  alucontrol;

  controller c (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc,
                        alusrc, regdst, regwrite, jump, rsp, alucontrol);

  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump, rsp,
                          alucontrol, zero, pc, instr, aluout, writedata, readdata);

endmodule
module controller(input  logic[5:0] op, funct,
                  input  logic     zero,
                  output logic     memtoreg, memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump, rsp,
                  output logic[2:0] alucontrol);

   logic [1:0] aluop;
   logic       branch;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
		 jump, rsp, aluop);

   aludec  ad (funct, aluop, alucontrol);

   assign pcsrc = branch & zero;

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump, rsp,
	              output logic[1:0] aluop );
   logic [9:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump, rsp} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 10'b1100001000; // R-type
      6'b100011: controls <= 10'b1010010000; // LW
      6'b101011: controls <= 10'b0010100000; // SW
      6'b101100: controls <= 10'b1010100001; // SW+
      6'b000100: controls <= 10'b0001000100; // BEQ
      6'b001000: controls <= 10'b1010000000; // ADDI
      6'b001001: controls <= 10'b1010000100; // SUBI
      6'b000010: controls <= 10'b0000000010; // J
      default:   controls <= 10'bx;          // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module datapath (input  logic clk, reset, memtoreg, pcsrc, alusrc, regdst,
                 input  logic regwrite, jump, rsp,
		 input  logic[2:0]  alucontrol, 
                 output logic zero, 
		 output logic[31:0] pc, 
	         input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
	         input  logic[31:0] readdata);

  logic [4:0]  writereg, writereg2;
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch, srca_p4;
  logic [31:0] signimm, signimmsh, srca, srcb, result, result2;
 
  // next PC logic
  flopr #(32) pcreg(clk, reset, pcnext, pc);
  adder       pcadd1(pc, 32'b100, pcplus4);
  sl2         immsh(signimm, signimmsh);
  adder       pcadd2(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
  mux2 #(32)  pcmux(pcnextbr, {pcplus4[31:28], 
                    instr[25:0], 2'b00}, jump, pcnext);

// register file logic
   regfile     rf (clk, regwrite, instr[25:21], instr[20:16], writereg2,
                   result2, srca, writedata);
                   
   adder        rd1p4 (srca, 32'b100, srca_p4);
   mux2 #(32)  wd3mux (result, srca_p4, rsp, result2);

   mux2 #(5)    a3mux (writereg, instr[25:21], rsp, writereg2);


   mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, writereg);
   mux2 #(32)  resmux (aluout, readdata, memtoreg, result);
   signext         se (instr[15:0], signimm);

  // ALU logic
   mux2 #(32)  srcbmux (writedata, signimm, alusrc, srcb);
   alu         alu (srca, srcb, alucontrol, aluout, zero);

endmodule


module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff@(posedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf [ra2] : 0;

endmodule


module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);

assign zero = (result == 0);

always_comb 
  case (alucont)
    3'b000:  result = a & b;
    3'b001:  result = a | b;
    3'b010:  result = a + b;
    3'b110:  result = a - b;
    3'b111:  result = a < b;
    default: result = 32'bx;
  endcase
endmodule


module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule



module FPGA_Top(input logic but1, but2, clk,
                output logic memwrite,
                output logic[3:0] an,
                output logic[6:0] c,
                output logic dp);
                
    // Clocks
    logic mips_clock, mips_reset;
    
    logic[31:0] writedata, dataadr, instr;
    
    
    // Pulse Controllers
    pulse_controller pc1(clk, but1, 1'b0, mips_clk);
    pulse_controller pc2(clk, but2, 1'b0, mips_reset);
    
    display_controller dc(clk, but2, 4'b1111, writedata[7:4], writedata[3:0], dataadr[7:4], dataadr[3:0], an, c, dp);
    
    top mips_mach(mips_clk, mips_reset, writedata, dataadr, memwrite, pc, instr);
endmodule

## General constraint file for the basys3 board

# Clock signal
set_property PACKAGE_PIN W5 [get_ports clk]
	set_property IOSTANDARD LVCMOS33 [get_ports clk]
	create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk]

# LEDs
set_property PACKAGE_PIN U16 [get_ports {memwrite}]
	set_property IOSTANDARD LVCMOS33 [get_ports {memwrite}]

#7 segment display
set_property PACKAGE_PIN W7 [get_ports {c[6]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {c[6]}]
set_property PACKAGE_PIN W6 [get_ports {c[5]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {c[5]}]
set_property PACKAGE_PIN U8 [get_ports {c[4]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {c[4]}]
set_property PACKAGE_PIN V8 [get_ports {c[3]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {c[3]}]
set_property PACKAGE_PIN U5 [get_ports {c[2]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {c[2]}]
set_property PACKAGE_PIN V5 [get_ports {c[1]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {c[1]}]
set_property PACKAGE_PIN U7 [get_ports {c[0]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {c[0]}]

set_property PACKAGE_PIN V7 [get_ports dp]
	set_property IOSTANDARD LVCMOS33 [get_ports dp]

set_property PACKAGE_PIN U2 [get_ports {an[0]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {an[0]}]
set_property PACKAGE_PIN U4 [get_ports {an[1]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {an[1]}]
set_property PACKAGE_PIN V4 [get_ports {an[2]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {an[2]}]
set_property PACKAGE_PIN W4 [get_ports {an[3]}]
	set_property IOSTANDARD LVCMOS33 [get_ports {an[3]}]


##Buttons
set_property PACKAGE_PIN W19 [get_ports but1]
	set_property IOSTANDARD LVCMOS33 [get_ports but1]
set_property PACKAGE_PIN T17 [get_ports but2]
set_property IOSTANDARD LVCMOS33 [get_ports but2]

`timescale 1ns / 1ps

module ALUSim();
logic clk, zero;
logic [31:0] a, b, result;
logic [2:0] alucont;

  alu dut(a, b, alucont, result, zero);
  
  initial
    begin
      alucont = 3'b000; a = 7; b = 1; #10;
      assert(result === 1) else $error("AND failed");
      alucont = 3'b001; a = 7; b = 0; #10;
      assert(result === 7) else $error("OR failed");
      alucont = 3'b010; a = 5; b = 10; #10;
      assert(result === 15) else $error("Addition failed");
      alucont = 3'b010; a = 5; b = -5; #10;
      assert(result === 0) else $error("Addition failed");
      alucont = 3'b110; a = 5; b = -5; #10;
      assert(result === 10) else $error("Substraction failed");
      alucont = 3'b110; a = 5; b = 5; #10;
      assert(result === 0) else $error("Substraction failed");
      alucont = 3'b111; a = 1; b = 4; #10;
      assert(result === 1) else $error("SLT failed");
      alucont = 3'b111; a = 2; b = 2; #10;
      assert(result === 0) else $error("SLT failed");
      alucont = 3'b111; a = 4; b = 2; #10;
      assert(result === 0) else $error("SLT failed");
    end
endmodule

`timescale 1ns / 1ps

module Top_TB();

// initial variables
logic[31:0] writeData, dataAdr, pc, instr;
logic clk, reset, memWrite;

// device under test
top dut(clk, reset, writeData, dataAdr, memWrite, pc, instr);

initial 
    begin
        clk = 0;
        reset = 1; 
        #20ns; reset = 0;
    end
    
always
    begin
        #10; clk = ~clk;
    end
    
endmodule