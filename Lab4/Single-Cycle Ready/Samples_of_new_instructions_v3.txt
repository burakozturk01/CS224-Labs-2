# Sample execution blocks including new instructions

# To test an instruction, assemble the code block and place it in imem module. 
# All blocks start at address 0x0

# bge: In this code, bge is taken 3 times until $a1 = 0
8'h00: instr = 32'h20040003;  	# addi $a0, $zero, 3             
8'h04: instr = 32'h20050012;  	# addi $a1, $zero, 12
8'h08: instr = 32'h20060002;  	# addi $a2, $zero, 2
8'h0c: instr = 32'h00a42822;		# sub $a1, $a1, $a0
8'h10: instr = <assemble by hand>	# bge $a1, $a0, -2
8'h14: instr = 32'h00c53020;   	# add $a2, $a2, $a1

# ble
addi $a0, $zero, 12
addi $a1, $zero, 3
addi $a2, $zero, 2
addi $a1, $a1, 3
ble $a1, $a0, -2        # taken 3 times, until $a1 = 15
add $a2, $a2, $a1       # $a2 = 2 + 15 = 17

# jm
addi $a0, $zero, 0x10
sw $a0, 0x50($zero)     # Stores 0x10 to address 0x50
jm 0x50($zero)          # Jumps to address 0x10
addi $a1, $zero, 3      # Not executed
addi $a2, $zero, 6      # Jumped to here

# subi
addi $a0, $zero, 7
subi $a1, $a0, 3        # $a1 = 7 - 3 = 4
subi $a2, $a1, 4        # $a2 = 4 - 4 = 0

# sw+
addi $a0, $zero, 0x50 
addi $a1, $zero, 1 
addi $a2, $zero, 16
beq $a1, $a2, 3         # not taken for $a1 = 1,2,4,8. taken for $a1 = 16
sw+ $a1, 0($a0)         # stores 1,2,4,8 into 0x50, 0x54, 0x58, 0x5c 
sll $a1, $a1, 1         # $a1 = $a1 * 2
j 0xc
add $a3, $zero, $a0     # $a3 = $a0 = 0x60

# jalm
addi $ra, $zero, 0
addi $a0, $zero, 0x14
sw $a0, 0x50($zero)     # stores 0x14 to address 0x50
jalm $t0, 0x50($zero)   # jumps to 0x14, sets $t0 = 0x10 (address of next instr.)
addi $a1, $zero, 3      # not executed
addi $a2, $zero, 6      # jumped to here
add $a3, $a2, $t0       # $a3 = 0x6 + 0x10 = 0x16

# push
addi $a0, $zero, 3
addi $a1, $zero, 5
addi $sp, $zero, 0x80   # stack pointer is initialized to 0x80
add $t0, $sp, $zero     # $to keeps the initial value of $sp (0x80)
push $a0                # loads 3 to ($sp) and decrements $sp by 4. $sp = 0x7c
sub $t1, $t0, $sp       # $t1 = 0x80 - 0x7c = 0x4
push $a1                # loads 5 to ($sp) and decrements $sp by 4. $sp = 0x78 
sub $t2, $t0, $sp       # $t2 = 0x80 - 0x78 = 0x8
lw $t3, 0($sp)          # $t3 = 5
lw $t4, 4($sp)          # $t4 = 3
add $t5, $t4, $t3       # $t5 = 5 + 3 = 8
